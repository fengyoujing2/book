package com.dbsun.controller.phonesys;

import com.dbsun.base.BaseController;
import com.dbsun.entity.system.Page;
import com.dbsun.entity.system.PageData;
import com.dbsun.service.phonesys.PhoCaloutService;
import net.sf.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;
/**
 * 呼叫工作台
 * @author DongZai
 *
 */
@Controller
@RequestMapping("/pho_calOut")
public class PhoCaloutController extends BaseController {
	
	@Autowired
	private PhoCaloutService phoCaloutService;
	
	/**
	 * 去外呼工作台界面 -- 第一次请求
	 * @return
	 */
	@RequestMapping("/goWorkBench")
	public String goWorkBench(ModelMap model){
		return "html/system/phonesys/callWorkbench";
	}
	
	/**
	 * 工作台中待拨打列表
	 * @return
	 */
	@RequestMapping("/wtCallLst")
	@ResponseBody
	public JSONObject wtCallLst(){
		PageData pd = this.getPageData();
		return this.getSucJson(phoCaloutService.getPageWtCallLst(this.putUserIdPd(pd)));
	}
	
	/**
	 * 获取工作台客户池数据
	 * @return
	 * 		外呼数量
	 */
	@RequestMapping("/getTolPoolDb")
	@ResponseBody
	public JSONObject getTolPoolDb(){
		PageData pd = this.getPageData();
		return this.getSucJson(phoCaloutService.getCountPollSiz(this.putUserIdPd(pd)).get("poolSize"));//池子总数
	}
	
	/**
	 * 获取工作台统计数据 -- 需异步更新的内容（外呼个数、待跟进、累计通话）
	 * @return
	 * 		当天外呼数量
	 * 		待跟进数量
	 * 		当天通话时长
	 */
	@RequestMapping("/getTolCallOtAdWtFwAdTmDb")
	@ResponseBody
	public JSONObject getTolCallOtAdWtFwAdTmDb(){
		PageData pd = this.getPageData();
		return this.getSucJson(phoCaloutService.getTolCallOtAdWtFwAdTmDb(this.putUserIdPd(pd)));
	}
	
	/**
	 * 通话记录列表数据
	 * @return
	 */
	@RequestMapping("/getPageGetRecFormFowLst")
	@ResponseBody
	public JSONObject getPageGetRecFormFowLst(){
		PageData pd = this.getPageData();
		Page page = this.getPage();
		page.setPd(pd);
		List<PageData> recLst = null;
		try {
			recLst = phoCaloutService.getPageRecFormFowLst(this.putUserIdPd(page, pd));
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println(recLst);
		return viewReturnPageData(page, recLst);
	}
	
	/**
	 * 未操作的情况下电话状态自动废弃
	 * @return
	 */
	@RequestMapping("/updatePhoScrapByCusID")
	@ResponseBody
	public JSONObject updatePhoScrapByCusID(){
		PageData pd = this.getPageData();
		return this.getAddOrUpdJson(phoCaloutService.updatePhoScrapByCusID(this.putUserPd(pd)));
	}
	
	/**
	 * 标记客户为空号
	 * @return
	 */
	@RequestMapping("/updateToNullPhoByCusId")
	@ResponseBody
	public JSONObject updateToNullPhoByCusId(){
		PageData pd = this.getPageData();
		return this.getAddOrUpdJson(phoCaloutService.updateToNullPhoByCusId(pd));
	}
	
	/**
	 * 更新拨打时间
	 * @return
	 */
	@RequestMapping("/updateCallTmByCusId")
	@ResponseBody
	public JSONObject updateCallTmByCusId(){
		PageData pd = this.getPageData();
		return this.getAddOrUpdJson(phoCaloutService.updateCallTmByCusId(pd));
	}
	
	/**
	 * 回写跟进
	 * @param
	 * @return
	 */
	@RequestMapping("/updateFwById")
	@ResponseBody
	public JSONObject updateFwById(){
		PageData pd = this.getPageData();
		return this.getAddOrUpdJson(phoCaloutService.updateFwById(pd));
	}

	/**
	 * 添加跟进--呼叫
	 * @param
	 * @return
	 */
	@RequestMapping("/addFlowForCall")
	@ResponseBody
	public JSONObject addFlowForCall(){
		PageData pd = this.getPageData();
		return phoCaloutService.addFlowForCall(this.putUserPd(pd));
	}
	
}
