package com.dbsun.config;


import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ConnectException;
import java.net.URL;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.List;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import com.dbsun.entity.system.PageData;
import com.dbsun.service.NoticeService;
import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.dbsun.controller.webSocket.WebSocketController;
import com.dbsun.util.DateUtil;
import com.dbsun.util.RedisUtil;
import com.dbsun.util.SmsUtil;

/**
 * 定时任务配置类
 *
 */
@Configuration
@Component
@EnableScheduling // 启用定时任务
public class SchedulingConfig {

    private final Logger logger = LoggerFactory.getLogger(getClass());
    @Autowired
	public  RedisUtil redisutil;
	@Autowired
	private NoticeService noticeService;

    public void sayHello(){  
       System.out.println("Hello world, i'm the king of the world!!!");  
    }  
    @Scheduled(cron = "0 0 * * * ?")//每一个小时执行一次
    public void scheduler() {
    	
//    	String requestUrl=redisutil.ACCESS_TOKEN_URL.replace("APPID", redisutil.weixin_appid).replace("APPSECRET", redisutil.weixin_secret);
//		JSONObject jsonObject=httpRequst(requestUrl, "GET", null);
//		//写入token进入缓存进行读取
//		jsonObject.getString("access_token");
//		String jsapiUrl=redisutil.JSAPI_TICKET_URL.replace("ACCESS_TOKEN", jsonObject.getString("access_token"));
//		boolean writeTokenState = redisutil.writeWxToken(jsonObject.getString("access_token"));
//		
//		//在同时获取jsapi_ticket，同时写入文件，失效时间跟accesstoken时间一致
//		JSONObject json=httpRequst(jsapiUrl, "GET", null);
//		boolean writeTicketState = redisutil.writeWxTicket(json.getString("ticket"));
    }
    @Scheduled(cron = "10 * * * * ?")//每10秒执行一次
    public void sendSocketMsg() {
    	//获取所有符合推送消息的提醒数据
		List<PageData> pdlst = noticeService.getNeedLst();
		System.out.println("当前总共有"+pdlst.size()+"条数据需要推送消息提醒!");
//    	//调用推送方法
    	WebSocketController.sendSocketMsg("消息提醒",pdlst);
    }
    
    /**
	 * 发送请求
	 * @param requestUrl
	 * @param requetMethod
	 * @param outputStr
	 * @return
	 */
	public JSONObject httpRequst(String requestUrl,String requetMethod,String outputStr){
		JSONObject jsonobject=null;
		StringBuffer buffer=new StringBuffer();
		try
		{
			//创建SSLContext对象，并使用我们指定的新人管理器初始化
			TrustManager[] tm={new MyX509TrustManagerObj()};
			SSLContext sslcontext=SSLContext.getInstance("SSL","SunJSSE");
			sslcontext.init(null, tm, new java.security.SecureRandom());
			//从上述SSLContext对象中得到SSLSocktFactory对象
			SSLSocketFactory ssf=sslcontext.getSocketFactory();
			
			URL url=new URL(requestUrl);
			HttpsURLConnection httpUrlConn=(HttpsURLConnection)url.openConnection();
			httpUrlConn.setSSLSocketFactory(ssf);
			
			httpUrlConn.setDoOutput(true);
			httpUrlConn.setDoInput(true);
			httpUrlConn.setUseCaches(false);
			//设置请求方式（GET/POST）
			httpUrlConn.setRequestMethod(requetMethod);
			
			if("GET".equalsIgnoreCase(requetMethod))
				httpUrlConn.connect();
			
			//当有数据需要提交时
			if(null!=outputStr)
			{
			OutputStream outputStream=httpUrlConn.getOutputStream();
			//注意编码格式，防止中文乱码
			outputStream.write(outputStr.getBytes("UTF-8"));
			outputStream.close();
			}
			
			//将返回的输入流转换成字符串
			InputStream inputStream=httpUrlConn.getInputStream();
			InputStreamReader inputStreamReader=new InputStreamReader(inputStream,"utf-8");
			BufferedReader bufferedReader=new BufferedReader(inputStreamReader);
			
			
			String str=null;
			while((str = bufferedReader.readLine()) !=null)
			{ 
				buffer.append(str);
			}
			bufferedReader.close();
			inputStreamReader.close();
			//释放资源
			inputStream.close();
			inputStream=null;
			httpUrlConn.disconnect();
			jsonobject=JSONObject.fromObject(buffer.toString());
		}
		catch (ConnectException ce) {
			// TODO: handle exception
		}
		catch (Exception e) {  
		}
		return jsonobject;
	}
	
	class MyX509TrustManagerObj implements X509TrustManager
	{

		public void checkClientTrusted(X509Certificate[] chain, String authType)
				throws CertificateException {
			// TODO Auto-generated method stub
			
		}

		public void checkServerTrusted(X509Certificate[] chain, String authType)
				throws CertificateException {
			// TODO Auto-generated method stub
			
		}

		public X509Certificate[] getAcceptedIssuers() {
			// TODO Auto-generated method stub
			return null;
		}
	}
	
	/**
	 * 每天凌晨清理所有SmsMap中一天前的记录
	 *
	 */
	@Scheduled(cron = "0 0 1 * * ?")//每天1点执行
	protected void cleanSmsMap(){
		System.out.println("清理前的SmsMap==========="+SmsUtil.SmsMap);
		System.out.println("清理前的IPMap==========="+SmsUtil.IPMap);
		System.out.println("清理前的phoneToCodeMap==========="+SmsUtil.phoneToCodeMap);
		//超过一天的记录删除
		this.cleanMap(SmsUtil.SmsMap, 1000 * 60 * 60 * 24);
		this.cleanMap(SmsUtil.IPMap, 1000 * 60 * 60 * 24);
		//超过一分钟的记录删除，有些号码会放在map中不能通过程序删除，只有通过定时器定期删除
		this.cleanMap(SmsUtil.phoneToCodeMap, 1000*60);
		System.out.println("清理后的SmsMap==========="+SmsUtil.SmsMap);
		System.out.println("清理后的IPMap==========="+SmsUtil.IPMap);
		System.out.println("清理后的phoneToCodeMap==========="+SmsUtil.phoneToCodeMap);
	}
	
	/**
	 * 清理k-v 
	 * @param map
	 * @param time
	 * 		时间间隔
	 */
	protected void cleanMap(Map<String, String> map, long time){
		for (String s : map.keySet()) {
			String value = map.get(s);
			String [] valAry = value.split("\\|");
			long firstSendSmsTm = Long.parseLong(valAry[0]);
			//一天前的记录删除
			if((DateUtil.getSysTime() - firstSendSmsTm) > time){
				map.remove(s);
			}
		}
	}
    
}
